{"version":3,"file":"static/js/424.253e577e.chunk.js","mappings":"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","sources":["fs.js"," ibt-telemetry/irsdk-constants.js"," ibt-telemetry/telemetry-sample.js"," ibt-telemetry/headers/telemetry-header.js"," ibt-telemetry/headers/disk-sub-header.js"," ibt-telemetry/headers/var-header.js"," ibt-telemetry/utils/read-file-to-buffer.js"," ibt-telemetry/utils/telemetry-file-loader.js"," ibt-telemetry/telemetry.js","tools/file-loader.js"],"sourcesContent":["import {BFSRequire} from 'browserfs';\nexport default BFSRequire('fs');","const variables = {\n  varType: {\n    0: {\n      size: 1,\n      iracingType: 'irsdk_char',\n      jsBufferMethod: 'toString'\n    },\n    1: {\n      size: 1,\n      iracingType: 'irsdk_bool',\n      jsBufferMethod: 'readInt8'\n    },\n    2: {\n      size: 4,\n      iracingType: 'irsdk_int',\n      jsBufferMethod: 'readInt32LE'\n    },\n    3: {\n      size: 4,\n      iracingType: 'irsdk_bitField',\n      jsBufferMethod: 'readUInt32LE'\n    },\n    4: {\n      size: 4,\n      iracingType: 'irsdk_float',\n      jsBufferMethod: 'readFloatLE'\n    },\n    5: {\n      size: 8,\n      iracingType: 'irsdk_double',\n      jsBufferMethod: 'readDoubleLE'\n    }\n  },\n\n  // bit fields\n  irsdk_EngineWarnings: {\n    irsdk_waterTempWarning: 0x01,\n    irsdk_fuelPressureWarning: 0x02,\n    irsdk_oilPressureWarning: 0x04,\n    irsdk_engineStalled: 0x08,\n    irsdk_pitSpeedLimiter: 0x10,\n    irsdk_revLimiterActive: 0x20,\n    irsdk_oilTempWarning: 0x40\n  },\n\n  // global flags\n  irsdk_Flags: {\n    // global flags\n    irsdk_checkered: 0x00000001,\n    irsdk_white: 0x00000002,\n    irsdk_green: 0x00000004,\n    irsdk_yellow: 0x00000008,\n    irsdk_red: 0x00000010,\n    irsdk_blue: 0x00000020,\n    irsdk_debris: 0x00000040,\n    irsdk_crossed: 0x00000080,\n    irsdk_yellowWaving: 0x00000100,\n    irsdk_oneLapToGreen: 0x00000200,\n    irsdk_greenHeld: 0x00000400,\n    irsdk_tenToGo: 0x00000800,\n    irsdk_fiveToGo: 0x00001000,\n    irsdk_randomWaving: 0x00002000,\n    irsdk_caution: 0x00004000,\n    irsdk_cautionWaving: 0x00008000,\n\n    // drivers black flags\n    irsdk_black: 0x00010000,\n    irsdk_disqualify: 0x00020000,\n    irsdk_servicible: 0x00040000, // car is allowed service (not a flag)\n    irsdk_furled: 0x00080000,\n    irsdk_repair: 0x00100000,\n\n    // start lights\n    irsdk_startHidden: 0x10000000,\n    irsdk_startReady: 0x20000000,\n    irsdk_startSet: 0x40000000,\n    irsdk_startGo: 0x80000000\n  },\n\n  // status\n  irsdk_TrkLoc: {\n    irsdk_NotInWorld: -1,\n    irsdk_OffTrack: 0,\n    irsdk_InPitStall: 1,\n    irsdk_AproachingPits: 2,\n    irsdk_OnTrack: 3\n  },\n\n  irsdk_TrkSurf: {\n    irsdk_SurfaceNotInWorld: -1,\n    irsdk_UndefinedMaterial: 0,\n\n    irsdk_Asphalt1Material: 1,\n    irsdk_Asphalt2Material: 2,\n    irsdk_Asphalt3Material: 3,\n    irsdk_Asphalt4Material: 4,\n    irsdk_Concrete1Material: 5,\n    irsdk_Concrete2Material: 6,\n    irsdk_RacingDirt1Material: 7,\n    irsdk_RacingDirt2Material: 8,\n    irsdk_Paint1Material: 9,\n    irsdk_Paint2Material: 10,\n    irsdk_Rumble1Material: 11,\n    irsdk_Rumble2Material: 12,\n    irsdk_Rumble3Material: 13,\n    irsdk_Rumble4Material: 14,\n\n    irsdk_Grass1Material: 15,\n    irsdk_Grass2Material: 16,\n    irsdk_Grass3Material: 17,\n    irsdk_Grass4Material: 18,\n    irsdk_Dirt1Material: 19,\n    irsdk_Dirt2Material: 20,\n    irsdk_Dirt3Material: 21,\n    irsdk_Dirt4Material: 22,\n    irsdk_SandMaterial: 23,\n    irsdk_Gravel1Material: 24,\n    irsdk_Gravel2Material: 25,\n    irsdk_GrasscreteMaterial: 26,\n    irsdk_AstroturfMaterial: 27\n  },\n\n  irsdk_SessionState: {\n    irsdk_StateInvalid: 0,\n    irsdk_StateGetInCar: 1,\n    irsdk_StateWarmup: 2,\n    irsdk_StateParadeLaps: 3,\n    irsdk_StateRacing: 4,\n    irsdk_StateCheckered: 5,\n    irsdk_StateCoolDown: 6\n  },\n\n  irsdk_CarLeftRight: {\n    irsdk_LROff: 0,\n    irsdk_LRClear: 1,        // no cars around us\n    irsdk_LRCarLeft: 2,      // there is a car to our left\n    irsdk_LRCarRight: 3,     // there is a car to our right\n    irsdk_LRCarLeftRight: 4, // there are cars on each side\n    irsdk_LR2CarsLeft: 5,    // there are two cars to our left\n    irsdk_LR2CarsRight: 6    // there are two cars to our right\n  },\n\n  irsdk_CameraState: {\n    irsdk_IsSessionScreen: 0x0001, // the camera tool can only be activated if viewing the session screen (out of car)\n    irsdk_IsScenicActive: 0x0002,  // the scenic camera is active (no focus car)\n\n    // these can be changed with a broadcast message\n    irsdk_CamToolActive: 0x0004,\n    irsdk_UIHidden: 0x0008,\n    irsdk_UseAutoShotSelection: 0x0010,\n    irsdk_UseTemporaryEdits: 0x0020,\n    irsdk_UseKeyAcceleration: 0x0040,\n    irsdk_UseKey10xAcceleration: 0x0080,\n    irsdk_UseMouseAimMode: 0x0100\n  },\n\n  irsdk_PitSvFlags: {\n    irsdk_LFTireChange: 0x0001,\n    irsdk_RFTireChange: 0x0002,\n    irsdk_LRTireChange: 0x0004,\n    irsdk_RRTireChange: 0x0008,\n\n    irsdk_FuelFill: 0x0010,\n    irsdk_WindshieldTearoff: 0x0020,\n    irsdk_FastRepair: 0x0040\n  },\n\n  irsdk_PitSvStatus: {\n    // status\n    irsdk_PitSvNone: 0,\n    irsdk_PitSvInProgress: 1,\n    irsdk_PitSvComplete: 2,\n\n    // errors\n    irsdk_PitSvTooFarLeft: 100,\n    irsdk_PitSvTooFarRight: 101,\n    irsdk_PitSvTooFarForward: 102,\n    irsdk_PitSvTooFarBack: 103,\n    irsdk_PitSvBadAngle: 104,\n    irsdk_PitSvCantFixThat: 105\n  },\n\n  irsdk_PaceMode: {\n    irsdk_PaceModeSingleFileStart: 0,\n    irsdk_PaceModeDoubleFileStart: 1,\n    irsdk_PaceModeSingleFileRestart: 2,\n    irsdk_PaceModeDoubleFileRestart: 3,\n    irsdk_PaceModeNotPacing: 4\n  },\n\n  irsdk_PaceFlags: {\n    irsdk_PaceFlagsEndOfLine: 0x01,\n    irsdk_PaceFlagsFreePass: 0x02,\n    irsdk_PaceFlagsWavedAround: 0x04\n  }\n}\n\nexport default variables\n","import Irsdk from './irsdk-constants'\nimport R from 'ramda'\n\nconst variableHeaders = new WeakMap()\n\nexport default class TelemetrySample {\n  constructor (buff, varHeaders) {\n    this._buff = buff\n    variableHeaders.set(this, varHeaders)\n  }\n\n  getParam (sampleVariableName) {\n    const header = variableHeaders.get(this)\n      .find(h => h.name.toLowerCase() === sampleVariableName.toLowerCase())\n\n    if (!header) {\n      return null\n    }\n\n    const variable = Irsdk.varType[header.type]\n    const valueBuffer = this._buff.slice(header.offset, header.offset + variable.size)\n\n    return {\n      name: header.name,\n      description: header.description,\n      value: valueBuffer[variable.jsBufferMethod](),\n      unit: header.unit\n    }\n  }\n\n  toJSON () {\n    const getParam = x => this.getParam(x)\n    const getName = R.prop('name')\n    const valueFromHeader = R.compose(R.pick(['value', 'unit']), getParam, getName)\n\n    return variableHeaders.get(this)\n      .reduce((accum, header) => R.assoc(getName(header), valueFromHeader(header), accum), {})\n  }\n}\n","const SIZE_IN_BYTES = 112\n\n/**\n * iRacing Telemtry Header\n *\n * Total Size: 112 bytes\n */\nclass TelemetryHeader {\n  constructor (parts) {\n    this.version = parts[0]\n    this.status = parts[1]\n    this.tickRate = parts[2]\n\n    this.sessionInfoUpdate = parts[3]\n    this.sessionInfoLength = parts[4]\n    this.sessionInfoOffset = parts[5]\n\n    this.numVars = parts[6]\n    this.varHeaderOffset = parts[7]\n\n    this.numBuf = parts[8]\n    this.bufLen = parts[9]\n    this.bufOffset = parts[13]\n\n    this._parts = parts.slice(10)\n  }\n\n  /**\n   * Create an instance of TelemetryHeader from the contents of a buffer.\n   */\n  static fromBuffer (buf) {\n    const telemetryPartsFromBuffer = (buffer, size = 4, start = 0, accum = []) => {\n      const bufferLength = buffer.length\n\n      if (bufferLength % size !== 0) {\n        throw new RangeError(`Buffer length must be a multiple of size. (buffer: ${bufferLength}, size: ${size})`)\n      }\n\n      if (start >= bufferLength) {\n        return accum\n      } else {\n        const a = buffer.slice(start, start + size).readInt32LE()\n        return telemetryPartsFromBuffer(buffer, size, start + size, [ ...accum, a ])\n      }\n    }\n\n    return new TelemetryHeader(telemetryPartsFromBuffer(buf))\n  }\n}\n\nexport { SIZE_IN_BYTES, TelemetryHeader }\nexport default TelemetryHeader\n","const SIZE_IN_BYTES = 32\n\n/**\n * Sub header used when writing telemetry to disk\n *\n * Total size: 32 bytes\n */\nclass DiskSubHeader {\n  /**\n   * DiskSubHeader constructor.\n   *\n   * params = {\n   *  startDate,\n   *  startTime,\n   *  endTime,\n   *  lapCount,\n   *  recordCount\n   * }\n   */\n  constructor (params) {\n    Object.assign(this, params)\n  }\n\n  /**\n   * Instantiate an instance of DiskSubHeader using the contents of the supplied buffer.\n   */\n  static fromBuffer (buffer) {\n    return new DiskSubHeader({\n      startDate: buffer.slice(0, 8).readFloatLE(),\n      startTime: buffer.slice(8, 16).readDoubleLE(),\n      endTime: buffer.slice(16, 24).readDoubleLE(),\n      lapCount: buffer.slice(24, 28).readInt32LE(),\n      recordCount: buffer.slice(28, 32).readInt32LE()\n    })\n  }\n}\n\nexport { SIZE_IN_BYTES, DiskSubHeader }\nexport default DiskSubHeader\n","const SIZE_IN_BYTES = 144\n\n/**\n *\n * Total size: 144 bytes\n */\nclass VarHeader {\n  /**\n   * Construct an instance of VarHeader\n   *\n   * params = {\n   *   type,\n   *   offset,\n   *   count,\n   *   countAsTime,\n   *   name,\n   *   description,\n   *   unit\n   * }\n   */\n  constructor (params) {\n    Object.assign(this, params)\n  }\n\n  /**\n   * Instantiate VarHeader from the contents of the supplied buffer\n   */\n  static fromBuffer (buffer) {\n    if (buffer.length !== SIZE_IN_BYTES) {\n      throw new RangeError(`Buffer length for VarHeader needs to be ${SIZE_IN_BYTES}, supplied ${buffer.length}`)\n    }\n\n    return new VarHeader({\n      type: buffer.slice(0, 4).readInt32LE(),\n      offset: buffer.slice(4, 8).readInt32LE(),\n      count: buffer.slice(8, 12).readInt32LE(),\n      countAsTime: buffer.slice(12, 13).readInt8(),\n      // padding here, 16 byte align (3 bytes)\n      name: buffer.slice(16, 48).toString().replace(/\\0/g, ''),\n      description: buffer.slice(48, 112).toString().replace(/\\0/g, ''),\n      unit: buffer.slice(112, 144).toString().replace(/\\0/g, '')\n    })\n  }\n}\n\nexport { SIZE_IN_BYTES, VarHeader }\nexport default VarHeader\n","import fs from 'fs'\nimport buf from 'buffer'\n\nconst {Buffer} = buf\n\n// Read a file from the start position and return a buffer of the supplied length\nconst readFileToBuffer = (fd, startPosition, bufferLength) => new Promise((resolve, reject) => {\n  const buffer = Buffer.alloc(bufferLength)\n  fs.read(fd, buffer, 0, bufferLength, startPosition, (err, num) => {\n    err ? reject(err) : resolve(buffer)\n  })\n})\n\nexport default readFileToBuffer\n","import fs from 'fs'\nimport R from 'ramda'\nimport { SIZE_IN_BYTES as HEADER_SIZE_IN_BYTES, TelemetryHeader } from '../headers/telemetry-header'\nimport { SIZE_IN_BYTES as DISK_SUB_HEADER_SIZE_IN_BYTES, DiskSubHeader } from '../headers/disk-sub-header'\nimport { SIZE_IN_BYTES as VAR_HEADER_SIZE_IN_BYTES, VarHeader } from '../headers/var-header'\nimport readFileToBuffer from './read-file-to-buffer'\nimport Telemetry from '../telemetry'\n\n// Open the data file and return it's file descriptor as a promise\nconst openDataFile = dataFile => new Promise((resolve, reject) => {\n  fs.open(dataFile, 'r', (err, fd) => {\n    err ? reject(err) : resolve(fd)\n  })\n})\n\n// Return the Telemetry header from the supplied file descriptor\nconst telemetryHeaderFromFileDescriptor = fd =>\n  readFileToBuffer(fd, 0, HEADER_SIZE_IN_BYTES)\n    .then(TelemetryHeader.fromBuffer)\n\n// Disk sub header telemetry\nconst diskSubHeaderFromFileDescriptor = fd =>\n  readFileToBuffer(fd, DISK_SUB_HEADER_SIZE_IN_BYTES, HEADER_SIZE_IN_BYTES)\n    .then(DiskSubHeader.fromBuffer)\n\nconst sessionInfoStringFromFileDescriptor = (fd, telemetryHeader) =>\n  readFileToBuffer(fd, telemetryHeader.sessionInfoOffset, telemetryHeader.sessionInfoLength)\n    .then(x => x.toString('ascii'))\n\nconst varHeadersFromFileDescriptor = (fd, telemetryHeader) => {\n  const numberOfVariables = telemetryHeader.numVars\n  const startPosition = telemetryHeader.varHeaderOffset\n  const fullBufferSize = numberOfVariables * VAR_HEADER_SIZE_IN_BYTES\n\n  return readFileToBuffer(fd, startPosition, fullBufferSize)\n    .then(buffer => {\n      return R.range(0, numberOfVariables).map(count => {\n        const start = count * VAR_HEADER_SIZE_IN_BYTES\n        const end = start + VAR_HEADER_SIZE_IN_BYTES\n        return VarHeader.fromBuffer(buffer.slice(start, end))\n      })\n    })\n}\n\nconst telemetryFileLoader = (file) => {\n  return openDataFile(file)\n    .then(fd => {\n      const headers = [\n        telemetryHeaderFromFileDescriptor(fd),\n        diskSubHeaderFromFileDescriptor(fd)\n      ]\n\n      return Promise.all(headers)\n        .then(([telemetryHeader, diskSubHeader]) => {\n          return Promise.all([\n            sessionInfoStringFromFileDescriptor(fd, telemetryHeader),\n            varHeadersFromFileDescriptor(fd, telemetryHeader)\n          ]).then(([sessionInfo, varHeaders]) => {\n            return new Telemetry(telemetryHeader, diskSubHeader, sessionInfo, varHeaders, fd)\n          })\n        })\n    })\n}\n\nexport default telemetryFileLoader\n","import fs from 'fs'\nimport yaml from 'js-yaml'\n\nimport TelemetrySample from './telemetry-sample'\nimport telemetryFileLoader from './utils/telemetry-file-loader'\n\nconst variableHeaders = new WeakMap()\nconst fileDescriptor = new WeakMap()\n\n/**\n * iRacing Telemetry\n */\nexport default class Telemetry {\n  /**\n   * Telemetry constructor.\n   */\n  constructor (telemetryHeader, diskSubHeader, sessionInfo, varHeaders, fd) {\n    this.headers = telemetryHeader\n    this.diskHeaders = diskSubHeader\n    this.sessionInfo = yaml.safeLoad(sessionInfo)\n\n    fileDescriptor.set(this, fd)\n    variableHeaders.set(this, varHeaders)\n  }\n\n  /**\n   * Instantiate a Telemetry instance from the contents of an ibt file\n   *\n   * @param file path to *.ibt file\n   * @return Telemetry instance of telemetry\n   */\n  static fromFile (file) {\n    return telemetryFileLoader(file)\n  }\n\n  /**\n   * Telemetry variable headers.\n   */\n  get varHeaders () {\n    return variableHeaders.get(this)\n  }\n\n  /**\n   * Generate a unique key for the telemetry session.\n   *\n   * The unique key is a combination of 3 fields:\n   *   accountId-sessionId-subSessionId\n   *\n   * @return string\n   */\n  uniqueId () {\n    const accountId = this.sessionInfo.DriverInfo.Drivers[this.sessionInfo.DriverInfo.DriverCarIdx].UserID\n    const sessionId = this.sessionInfo.WeekendInfo.SessionID\n    const subSessionId = this.sessionInfo.WeekendInfo.SubSessionID\n    return `${accountId}-${sessionId}-${subSessionId}`\n  }\n\n  /**\n   * Telemetry samples generator.\n   */\n  * samples () {\n    let hasSample = true\n    let count = 0\n\n    const fd = fileDescriptor.get(this)\n    const length = this.headers.bufLen\n    const buffer = Buffer.alloc(length)\n\n    while (hasSample) {\n      const start = this.headers.bufOffset + (count++ * length)\n      const bytesRead = fs.readSync(fd, buffer, 0, length, start)\n\n      if (bytesRead !== length) {\n        hasSample = false\n      } else {\n        yield new TelemetrySample(buffer, this.varHeaders)\n      }\n    }\n  }\n}\n","import Telemetry from '../ ibt-telemetry';\nimport * as BrowserFS from 'browserfs';\n\nexport const loadIbtFile = async (file) => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => {\n    const data = reader.result;\n    BrowserFS.configure({\n      fs: 'InMemory'\n    }, async e => {\n      if (e) {\n        reject(e);\n        return;\n      }\n\n      const fs = BrowserFS.BFSRequire('fs');\n      const { Buffer } = BrowserFS.BFSRequire('buffer');\n      fs.writeFileSync(file.name, Buffer.from(data));\n\n      const telemetry = await Telemetry.fromFile(file.name);\n      resolve(telemetry);\n    });\n  };\n  reader.onerror = reject;\n  reader.readAsArrayBuffer(file);\n});\n\n"],"names":["BFSRequire","varType","size","iracingType","jsBufferMethod","irsdk_EngineWarnings","irsdk_waterTempWarning","irsdk_fuelPressureWarning","irsdk_oilPressureWarning","irsdk_engineStalled","irsdk_pitSpeedLimiter","irsdk_revLimiterActive","irsdk_oilTempWarning","irsdk_Flags","irsdk_checkered","irsdk_white","irsdk_green","irsdk_yellow","irsdk_red","irsdk_blue","irsdk_debris","irsdk_crossed","irsdk_yellowWaving","irsdk_oneLapToGreen","irsdk_greenHeld","irsdk_tenToGo","irsdk_fiveToGo","irsdk_randomWaving","irsdk_caution","irsdk_cautionWaving","irsdk_black","irsdk_disqualify","irsdk_servicible","irsdk_furled","irsdk_repair","irsdk_startHidden","irsdk_startReady","irsdk_startSet","irsdk_startGo","irsdk_TrkLoc","irsdk_NotInWorld","irsdk_OffTrack","irsdk_InPitStall","irsdk_AproachingPits","irsdk_OnTrack","irsdk_TrkSurf","irsdk_SurfaceNotInWorld","irsdk_UndefinedMaterial","irsdk_Asphalt1Material","irsdk_Asphalt2Material","irsdk_Asphalt3Material","irsdk_Asphalt4Material","irsdk_Concrete1Material","irsdk_Concrete2Material","irsdk_RacingDirt1Material","irsdk_RacingDirt2Material","irsdk_Paint1Material","irsdk_Paint2Material","irsdk_Rumble1Material","irsdk_Rumble2Material","irsdk_Rumble3Material","irsdk_Rumble4Material","irsdk_Grass1Material","irsdk_Grass2Material","irsdk_Grass3Material","irsdk_Grass4Material","irsdk_Dirt1Material","irsdk_Dirt2Material","irsdk_Dirt3Material","irsdk_Dirt4Material","irsdk_SandMaterial","irsdk_Gravel1Material","irsdk_Gravel2Material","irsdk_GrasscreteMaterial","irsdk_AstroturfMaterial","irsdk_SessionState","irsdk_StateInvalid","irsdk_StateGetInCar","irsdk_StateWarmup","irsdk_StateParadeLaps","irsdk_StateRacing","irsdk_StateCheckered","irsdk_StateCoolDown","irsdk_CarLeftRight","irsdk_LROff","irsdk_LRClear","irsdk_LRCarLeft","irsdk_LRCarRight","irsdk_LRCarLeftRight","irsdk_LR2CarsLeft","irsdk_LR2CarsRight","irsdk_CameraState","irsdk_IsSessionScreen","irsdk_IsScenicActive","irsdk_CamToolActive","irsdk_UIHidden","irsdk_UseAutoShotSelection","irsdk_UseTemporaryEdits","irsdk_UseKeyAcceleration","irsdk_UseKey10xAcceleration","irsdk_UseMouseAimMode","irsdk_PitSvFlags","irsdk_LFTireChange","irsdk_RFTireChange","irsdk_LRTireChange","irsdk_RRTireChange","irsdk_FuelFill","irsdk_WindshieldTearoff","irsdk_FastRepair","irsdk_PitSvStatus","irsdk_PitSvNone","irsdk_PitSvInProgress","irsdk_PitSvComplete","irsdk_PitSvTooFarLeft","irsdk_PitSvTooFarRight","irsdk_PitSvTooFarForward","irsdk_PitSvTooFarBack","irsdk_PitSvBadAngle","irsdk_PitSvCantFixThat","irsdk_PaceMode","irsdk_PaceModeSingleFileStart","irsdk_PaceModeDoubleFileStart","irsdk_PaceModeSingleFileRestart","irsdk_PaceModeDoubleFileRestart","irsdk_PaceModeNotPacing","irsdk_PaceFlags","irsdk_PaceFlagsEndOfLine","irsdk_PaceFlagsFreePass","irsdk_PaceFlagsWavedAround","variableHeaders","WeakMap","TelemetrySample","constructor","buff","varHeaders","this","_buff","set","getParam","sampleVariableName","header","get","find","h","name","toLowerCase","variable","Irsdk","type","valueBuffer","slice","offset","description","value","unit","toJSON","getName","R","valueFromHeader","x","reduce","accum","TelemetryHeader","parts","version","status","tickRate","sessionInfoUpdate","sessionInfoLength","sessionInfoOffset","numVars","varHeaderOffset","numBuf","bufLen","bufOffset","_parts","fromBuffer","buf","telemetryPartsFromBuffer","buffer","arguments","length","undefined","start","bufferLength","RangeError","concat","a","readInt32LE","DiskSubHeader","params","Object","assign","startDate","readFloatLE","startTime","readDoubleLE","endTime","lapCount","recordCount","SIZE_IN_BYTES","VarHeader","count","countAsTime","readInt8","toString","replace","Buffer","readFileToBuffer","fd","startPosition","Promise","resolve","reject","alloc","fs","read","err","num","telemetryHeaderFromFileDescriptor","then","diskSubHeaderFromFileDescriptor","sessionInfoStringFromFileDescriptor","telemetryHeader","varHeadersFromFileDescriptor","numberOfVariables","VAR_HEADER_SIZE_IN_BYTES","map","end","file","dataFile","open","headers","all","_ref","diskSubHeader","_ref2","sessionInfo","Telemetry","fileDescriptor","diskHeaders","yaml","fromFile","telemetryFileLoader","uniqueId","accountId","DriverInfo","Drivers","DriverCarIdx","UserID","sessionId","WeekendInfo","SessionID","subSessionId","SubSessionID","samples","hasSample","readSync","loadIbtFile","async","reader","FileReader","onload","data","result","BrowserFS","e","writeFileSync","from","telemetry","onerror","readAsArrayBuffer"],"sourceRoot":""}